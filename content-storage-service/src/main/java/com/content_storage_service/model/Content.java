package com.content_storage_service.model;

import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.mongodb.core.mapping.Document;
import com.fasterxml.jackson.databind.JsonNode; // For flexible JSON data
import lombok.Data; // Lombok for boilerplate
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder; // For building abstract classes
import com.shortscreator.shared.enums.ContentType;
import com.shortscreator.shared.dto.OutputAssetsV1;
import com.shortscreator.shared.enums.ContentStatus; // Enum for content status
import java.time.Instant;

@Data // Generates getters, setters, equals, hashCode, toString
@NoArgsConstructor // Generates a no-args constructor
@SuperBuilder // Required for builder pattern on abstract classes

// Map the Java class to a MongoDB collection
@Document(collection = "contents") 
public class Content { // No need for abstract here, unless you'll have multiple concrete types for a single collection
    
    @Id // Maps to MongoDB's _id field
    private String id; // Will typically be a UUID generated by the service

    private String userId; // ID of the user who owns this content

    private String templateId; // Identifier for the chosen template (e.g., "bigfoot_pov_v1")

    private ContentType contentType; // Enum for content type (e.g., Reddit story, etc)

    private ContentStatus status; // Enum for content status (DRAFT, PROCESSING, COMPLETED, FAILED)

    @CreatedDate // Spring Data MongoDB automatically sets this on creation
    private Instant createdAt;

    @LastModifiedDate // Spring Data MongoDB automatically updates this on modification
    private Instant lastModifiedAt;

    // Flexible part for template-specific parameters.
    // Using JsonNode is powerful for direct JSON manipulation and validation.
    private JsonNode templateParams; 

    // Contains URLs and metadata for final output assets
    private OutputAssetsV1 outputAssets; 

    // Track errors during processing
    private String errorMessage; // If a processing step failed during a draft state
}